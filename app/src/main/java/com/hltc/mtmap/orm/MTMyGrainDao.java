package com.hltc.mtmap.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hltc.mtmap.MTMyGrain;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MTMY_GRAIN.
 */
public class MTMyGrainDao extends AbstractDao<MTMyGrain, Long> {

    public static final String TABLENAME = "MTMY_GRAIN";
    private DaoSession daoSession;
    ;

    public MTMyGrainDao(DaoConfig config) {
        super(config);
    }


    public MTMyGrainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'MTMY_GRAIN' (" + //
                "'GRAIN_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: grainId
                "'TEXT' TEXT," + // 1: text
                "'CREATE_TIME' TEXT," + // 2: createTime
                "'SITE_NAME' TEXT," + // 3: siteName
                "'ADDRESS' TEXT," + // 4: address
                "'IMAGE' TEXT);"); // 5: image
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MTMY_GRAIN'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, MTMyGrain entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGrainId());

        String text = entity.getText();
        if (text != null) {
            stmt.bindString(2, text);
        }

        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(3, createTime);
        }

        String siteName = entity.getSiteName();
        if (siteName != null) {
            stmt.bindString(4, siteName);
        }

        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }

        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
    }

    @Override
    protected void attachEntity(MTMyGrain entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public MTMyGrain readEntity(Cursor cursor, int offset) {
        MTMyGrain entity = new MTMyGrain( //
                cursor.getLong(offset + 0), // grainId
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // text
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createTime
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // siteName
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // image
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, MTMyGrain entity, int offset) {
        entity.setGrainId(cursor.getLong(offset + 0));
        entity.setText(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSiteName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(MTMyGrain entity, long rowId) {
        entity.setGrainId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(MTMyGrain entity) {
        if (entity != null) {
            return entity.getGrainId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity MTMyGrain.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GrainId = new Property(0, long.class, "grainId", true, "GRAIN_ID");
        public final static Property Text = new Property(1, String.class, "text", false, "TEXT");
        public final static Property CreateTime = new Property(2, String.class, "createTime", false, "CREATE_TIME");
        public final static Property SiteName = new Property(3, String.class, "siteName", false, "SITE_NAME");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Image = new Property(5, String.class, "image", false, "IMAGE");
    }

}
