package com.hltc.mtmap.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hltc.mtmap.MTMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MTMESSAGE.
*/
public class MTMessageDao extends AbstractDao<MTMessage, Long> {

    public static final String TABLENAME = "MTMESSAGE";

    /**
     * Properties of entity MTMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property UserId = new Property(2, Long.class, "userId", false, "USER_ID");
        public final static Property Portrait = new Property(3, String.class, "portrait", false, "PORTRAIT");
        public final static Property NickName = new Property(4, String.class, "nickName", false, "NICK_NAME");
        public final static Property Remark = new Property(5, String.class, "remark", false, "REMARK");
        public final static Property GrainId = new Property(6, Long.class, "grainId", false, "GRAIN_ID");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property Address = new Property(8, String.class, "address", false, "ADDRESS");
        public final static Property Image = new Property(9, String.class, "image", false, "IMAGE");
        public final static Property Text = new Property(10, String.class, "text", false, "TEXT");
        public final static Property CommentTxt = new Property(11, String.class, "commentTxt", false, "COMMENT_TXT");
        public final static Property CreateTime = new Property(12, String.class, "createTime", false, "CREATE_TIME");
    };

    private DaoSession daoSession;


    public MTMessageDao(DaoConfig config) {
        super(config);
    }
    
    public MTMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MTMESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "'TYPE' TEXT," + // 1: type
                "'USER_ID' INTEGER," + // 2: userId
                "'PORTRAIT' TEXT," + // 3: portrait
                "'NICK_NAME' TEXT," + // 4: nickName
                "'REMARK' TEXT," + // 5: remark
                "'GRAIN_ID' INTEGER," + // 6: grainId
                "'NAME' TEXT," + // 7: name
                "'ADDRESS' TEXT," + // 8: address
                "'IMAGE' TEXT," + // 9: image
                "'TEXT' TEXT," + // 10: text
                "'COMMENT_TXT' TEXT," + // 11: commentTxt
                "'CREATE_TIME' TEXT);"); // 12: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MTMESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MTMessage entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
 
        String portrait = entity.getPortrait();
        if (portrait != null) {
            stmt.bindString(4, portrait);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
 
        Long grainId = entity.getGrainId();
        if (grainId != null) {
            stmt.bindLong(7, grainId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(10, image);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(11, text);
        }
 
        String commentTxt = entity.getCommentTxt();
        if (commentTxt != null) {
            stmt.bindString(12, commentTxt);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(13, createTime);
        }
    }

    @Override
    protected void attachEntity(MTMessage entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MTMessage readEntity(Cursor cursor, int offset) {
        MTMessage entity = new MTMessage( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // portrait
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remark
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // grainId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // address
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // image
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // text
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // commentTxt
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // createTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MTMessage entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setPortrait(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGrainId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setImage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setText(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCommentTxt(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreateTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MTMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MTMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
