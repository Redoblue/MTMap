package com.hltc.mtmap.orm.models;

import java.util.List;
import com.hltc.mtmap.orm.DaoSession;
import de.greenrobot.dao.DaoException;

import com.hltc.mtmap.orm.dao.MTCommentDao;
import com.hltc.mtmap.orm.dao.MTGrainDao;
import com.hltc.mtmap.orm.dao.MTUserDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table MTCOMMENT.
 */
public class MTComment {

    private long id;
    /** Not-null value. */
    private String content;
    /** Not-null value. */
    private java.util.Date date;
    private Long toCommentId;
    private Long userId;
    private long grainId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MTCommentDao myDao;

    private MTUser mTUser;
    private Long mTUser__resolvedKey;

    private MTGrain mTGrain;
    private Long mTGrain__resolvedKey;

    private MTComment parent;
    private Long parent__resolvedKey;

    private List<MTComment> children;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public MTComment() {
    }

    public MTComment(long id) {
        this.id = id;
    }

    public MTComment(long id, String content, java.util.Date date, Long toCommentId, Long userId, long grainId) {
        this.id = id;
        this.content = content;
        this.date = date;
        this.toCommentId = toCommentId;
        this.userId = userId;
        this.grainId = grainId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMTCommentDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getContent() {
        return content;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContent(String content) {
        this.content = content;
    }

    /** Not-null value. */
    public java.util.Date getDate() {
        return date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Long getToCommentId() {
        return toCommentId;
    }

    public void setToCommentId(Long toCommentId) {
        this.toCommentId = toCommentId;
    }

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public long getGrainId() {
        return grainId;
    }

    public void setGrainId(long grainId) {
        this.grainId = grainId;
    }

    /** To-one relationship, resolved on first access. */
    public MTUser getMTUser() {
        Long __key = this.userId;
        if (mTUser__resolvedKey == null || !mTUser__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MTUserDao targetDao = daoSession.getMTUserDao();
            MTUser mTUserNew = targetDao.load(__key);
            synchronized (this) {
                mTUser = mTUserNew;
            	mTUser__resolvedKey = __key;
            }
        }
        return mTUser;
    }

    public void setMTUser(MTUser mTUser) {
        synchronized (this) {
            this.mTUser = mTUser;
            userId = mTUser == null ? null : mTUser.getId();
            mTUser__resolvedKey = userId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public MTGrain getMTGrain() {
        long __key = this.grainId;
        if (mTGrain__resolvedKey == null || !mTGrain__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MTGrainDao targetDao = daoSession.getMTGrainDao();
            MTGrain mTGrainNew = targetDao.load(__key);
            synchronized (this) {
                mTGrain = mTGrainNew;
            	mTGrain__resolvedKey = __key;
            }
        }
        return mTGrain;
    }

    public void setMTGrain(MTGrain mTGrain) {
        if (mTGrain == null) {
            throw new DaoException("To-one property 'grainId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.mTGrain = mTGrain;
            grainId = mTGrain.getId();
            mTGrain__resolvedKey = grainId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public MTComment getParent() {
        Long __key = this.toCommentId;
        if (parent__resolvedKey == null || !parent__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MTCommentDao targetDao = daoSession.getMTCommentDao();
            MTComment parentNew = targetDao.load(__key);
            synchronized (this) {
                parent = parentNew;
            	parent__resolvedKey = __key;
            }
        }
        return parent;
    }

    public void setParent(MTComment parent) {
        synchronized (this) {
            this.parent = parent;
            toCommentId = parent == null ? null : parent.getId();
            parent__resolvedKey = toCommentId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MTComment> getChildren() {
        if (children == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MTCommentDao targetDao = daoSession.getMTCommentDao();
            List<MTComment> childrenNew = targetDao._queryMTComment_Children(id);
            synchronized (this) {
                if(children == null) {
                    children = childrenNew;
                }
            }
        }
        return children;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChildren() {
        children = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
