package com.hltc.mtmap.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hltc.mtmap.MGrain;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MGRAIN.
 */
public class MGrainDao extends AbstractDao<MGrain, Long> {

    public static final String TABLENAME = "MGRAIN";
    private DaoSession daoSession;
    ;

    public MGrainDao(DaoConfig config) {
        super(config);
    }


    public MGrainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MGRAIN' (" + //
                "'GRAIN_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: grainId
                "'USER_ID' INTEGER," + // 1: userId
                "'NICK_NAME' TEXT," + // 2: nickName
                "'REMARK' TEXT," + // 3: remark
                "'CATE_ID' TEXT," + // 4: cateId
                "'TEXT' TEXT," + // 5: text
                "'USER_PORTRAIT' TEXT," + // 6: userPortrait
                "'SITE_ID' TEXT," + // 7: siteId
                "'ADDRESS' TEXT," + // 8: address
                "'NAME' TEXT," + // 9: name
                "'PHONE' TEXT," + // 10: phone
                "'SOURCE' TEXT," + // 11: source
                "'GTYPE' TEXT," + // 12: gtype
                "'MTYPE' TEXT," + // 13: mtype
                "'LAT' REAL," + // 14: lat
                "'LON' REAL);"); // 15: lon
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MGRAIN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MGrain entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGrainId());

        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }

        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }

        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }

        String cateId = entity.getCateId();
        if (cateId != null) {
            stmt.bindString(5, cateId);
        }

        String text = entity.getText();
        if (text != null) {
            stmt.bindString(6, text);
        }

        String userPortrait = entity.getUserPortrait();
        if (userPortrait != null) {
            stmt.bindString(7, userPortrait);
        }

        String siteId = entity.getSiteId();
        if (siteId != null) {
            stmt.bindString(8, siteId);
        }

        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(10, name);
        }

        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }

        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(12, source);
        }

        String gtype = entity.getGtype();
        if (gtype != null) {
            stmt.bindString(13, gtype);
        }

        String mtype = entity.getMtype();
        if (mtype != null) {
            stmt.bindString(14, mtype);
        }

        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(15, lat);
        }

        Double lon = entity.getLon();
        if (lon != null) {
            stmt.bindDouble(16, lon);
        }
    }

    @Override
    protected void attachEntity(MGrain entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public MGrain readEntity(Cursor cursor, int offset) {
        MGrain entity = new MGrain( //
                cursor.getLong(offset + 0), // grainId
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remark
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cateId
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // text
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userPortrait
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // siteId
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // address
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // name
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phone
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // source
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // gtype
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // mtype
                cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // lat
                cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15) // lon
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MGrain entity, int offset) {
        entity.setGrainId(cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCateId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setText(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserPortrait(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSiteId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSource(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGtype(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMtype(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLat(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setLon(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MGrain entity, long rowId) {
        entity.setGrainId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(MGrain entity) {
        if (entity != null) {
            return entity.getGrainId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

/**
     * Properties of entity MGrain.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property GrainId = new Property(0, long.class, "grainId", true, "GRAIN_ID");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property Remark = new Property(3, String.class, "remark", false, "REMARK");
        public final static Property CateId = new Property(4, String.class, "cateId", false, "CATE_ID");
        public final static Property Text = new Property(5, String.class, "text", false, "TEXT");
        public final static Property UserPortrait = new Property(6, String.class, "userPortrait", false, "USER_PORTRAIT");
        public final static Property SiteId = new Property(7, String.class, "siteId", false, "SITE_ID");
        public final static Property Address = new Property(8, String.class, "address", false, "ADDRESS");
        public final static Property Name = new Property(9, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(10, String.class, "phone", false, "PHONE");
        public final static Property Source = new Property(11, String.class, "source", false, "SOURCE");
        public final static Property Gtype = new Property(12, String.class, "gtype", false, "GTYPE");
        public final static Property Mtype = new Property(13, String.class, "mtype", false, "MTYPE");
        public final static Property Lat = new Property(14, Double.class, "lat", false, "LAT");
        public final static Property Lon = new Property(15, Double.class, "lon", false, "LON");
    }
    
}
