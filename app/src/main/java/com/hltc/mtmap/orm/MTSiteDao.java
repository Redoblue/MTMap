package com.hltc.mtmap.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hltc.mtmap.MTSite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MTSITE.
 */
public class MTSiteDao extends AbstractDao<MTSite, String> {

    public static final String TABLENAME = "MTSITE";
    private DaoSession daoSession;
    ;

    public MTSiteDao(DaoConfig config) {
        super(config);
    }


    public MTSiteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MTSITE' (" + //
                "'SITE_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: siteId
                "'NAME' TEXT," + // 1: name
                "'ADDRESS' TEXT," + // 2: address
                "'LAT' REAL," + // 3: lat
                "'LON' REAL," + // 4: lon
                "'PHONE' TEXT);"); // 5: phone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MTSITE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MTSite entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getSiteId());

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }

        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(4, lat);
        }

        Double lon = entity.getLon();
        if (lon != null) {
            stmt.bindDouble(5, lon);
        }

        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
    }

    @Override
    protected void attachEntity(MTSite entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public MTSite readEntity(Cursor cursor, int offset) {
        MTSite entity = new MTSite( //
                cursor.getString(offset + 0), // siteId
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
                cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // lat
                cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // lon
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // phone
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MTSite entity, int offset) {
        entity.setSiteId(cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLat(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLon(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }

    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MTSite entity, long rowId) {
        return entity.getSiteId();
    }

    /** @inheritdoc */
    @Override
    public String getKey(MTSite entity) {
        if (entity != null) {
            return entity.getSiteId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

/**
     * Properties of entity MTSite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SiteId = new Property(0, String.class, "siteId", true, "SITE_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Lat = new Property(3, Double.class, "lat", false, "LAT");
        public final static Property Lon = new Property(4, Double.class, "lon", false, "LON");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
    }
    
}
