package com.hltc.mtmap.orm.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.hltc.mtmap.orm.models.MTGrain;
import com.hltc.mtmap.orm.models.MTUser;

import com.hltc.mtmap.orm.models.MTPhoto;
import com.hltc.mtmap.orm.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MTPHOTO.
*/
public class MTPhotoDao extends AbstractDao<MTPhoto, Long> {

    public static final String TABLENAME = "MTPHOTO";

    /**
     * Properties of entity MTPhoto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property PreviewURL = new Property(1, String.class, "previewURL", false, "PREVIEW_URL");
        public final static Property ThumbnailURL = new Property(2, String.class, "thumbnailURL", false, "THUMBNAIL_URL");
        public final static Property UserId = new Property(3, long.class, "userId", false, "USER_ID");
        public final static Property GrainId = new Property(4, long.class, "grainId", false, "GRAIN_ID");
    };

    private DaoSession daoSession;

    private Query<MTPhoto> mTUser_Photo2UserQuery;
    private Query<MTPhoto> mTGrain_Photos2GrainQuery;

    public MTPhotoDao(DaoConfig config) {
        super(config);
    }
    
    public MTPhotoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MTPHOTO' (" + //
                "'_id' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'PREVIEW_URL' TEXT NOT NULL ," + // 1: previewURL
                "'THUMBNAIL_URL' TEXT NOT NULL ," + // 2: thumbnailURL
                "'USER_ID' INTEGER NOT NULL ," + // 3: userId
                "'GRAIN_ID' INTEGER NOT NULL );"); // 4: grainId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MTPHOTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MTPhoto entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindString(2, entity.getPreviewURL());
        stmt.bindString(3, entity.getThumbnailURL());
        stmt.bindLong(4, entity.getUserId());
        stmt.bindLong(5, entity.getGrainId());
    }

    @Override
    protected void attachEntity(MTPhoto entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MTPhoto readEntity(Cursor cursor, int offset) {
        MTPhoto entity = new MTPhoto( //
            cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // previewURL
            cursor.getString(offset + 2), // thumbnailURL
            cursor.getLong(offset + 3), // userId
            cursor.getLong(offset + 4) // grainId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MTPhoto entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPreviewURL(cursor.getString(offset + 1));
        entity.setThumbnailURL(cursor.getString(offset + 2));
        entity.setUserId(cursor.getLong(offset + 3));
        entity.setGrainId(cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MTPhoto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MTPhoto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "photo2User" to-many relationship of MTUser. */
    public List<MTPhoto> _queryMTUser_Photo2User(long userId) {
        synchronized (this) {
            if (mTUser_Photo2UserQuery == null) {
                QueryBuilder<MTPhoto> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                mTUser_Photo2UserQuery = queryBuilder.build();
            }
        }
        Query<MTPhoto> query = mTUser_Photo2UserQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

    /** Internal query to resolve the "photos2Grain" to-many relationship of MTGrain. */
    public List<MTPhoto> _queryMTGrain_Photos2Grain(long grainId) {
        synchronized (this) {
            if (mTGrain_Photos2GrainQuery == null) {
                QueryBuilder<MTPhoto> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GrainId.eq(null));
                mTGrain_Photos2GrainQuery = queryBuilder.build();
            }
        }
        Query<MTPhoto> query = mTGrain_Photos2GrainQuery.forCurrentThread();
        query.setParameter(0, grainId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMTUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getMTGrainDao().getAllColumns());
            builder.append(" FROM MTPHOTO T");
            builder.append(" LEFT JOIN MTUSER T0 ON T.'USER_ID'=T0.'_id'");
            builder.append(" LEFT JOIN MTGRAIN T1 ON T.'GRAIN_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected MTPhoto loadCurrentDeep(Cursor cursor, boolean lock) {
        MTPhoto entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        MTUser mTUser = loadCurrentOther(daoSession.getMTUserDao(), cursor, offset);
         if(mTUser != null) {
            entity.setMTUser(mTUser);
        }
        offset += daoSession.getMTUserDao().getAllColumns().length;

        MTGrain mTGrain = loadCurrentOther(daoSession.getMTGrainDao(), cursor, offset);
         if(mTGrain != null) {
            entity.setMTGrain(mTGrain);
        }

        return entity;    
    }

    public MTPhoto loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<MTPhoto> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<MTPhoto> list = new ArrayList<MTPhoto>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<MTPhoto> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<MTPhoto> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
